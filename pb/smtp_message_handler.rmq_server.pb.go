// "github.com/requiemofthesouls/pigeomail/proto/rmq"
// Code generated by protoc-gen-go-rmq. DO NOT EDIT.

package pigeomailpb

import (
	"context"

	events1 "github.com/requiemofthesouls/pigeomail/api/pb"
	"github.com/requiemofthesouls/svc-rmq/server"
	"github.com/requiemofthesouls/svc-rmq/server/consumer"
)

type SMTPMessageEventsRMQServer interface {
	SMTPMessageV1(context.Context, *events1.SMTPMessageEventV1) error
}

func RegisterSMTPMessageEventsRMQServer(s server.Manager, srv SMTPMessageEventsRMQServer) {
	s.RegisterService(
		consumer.MapQueueHandlers{
			"h.ps-list.SMTPMessageHandlerV1": consumer.QueueHandlerItem{
				ExchangeName: "events.smtp",
				RoutingKey:   "message.v1",
				Handler:      NewRMQSMTPMessageV1(srv),
			},
		},
	)
}

type RMQSMTPMessageV1 struct {
	listener SMTPMessageEventsRMQServer
}

func NewRMQSMTPMessageV1(listener SMTPMessageEventsRMQServer) RMQSMTPMessageV1 {
	return RMQSMTPMessageV1{
		listener: listener,
	}
}
func (h RMQSMTPMessageV1) Handle(ctx context.Context, dec func(interface{}) error) error {
	var ev events1.SMTPMessageEventV1
	if err := dec(&ev); err != nil {
		return err
	}

	return h.listener.SMTPMessageV1(ctx, &ev)
}
