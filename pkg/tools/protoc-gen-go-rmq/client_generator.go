package main

import (
	"fmt"

	"github.com/iancoleman/strcase"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"

	optionspb "github.com/requiemofthesouls/pigeomail/pkg/tools/protoc-gen-go-rmq/pb"
)

func generateClients(gen *protogen.Plugin, file *protogen.File) {
	g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+".rmq_client.pb.go", file.GoImportPath)

	g.P("// Code generated by protoc-gen-go-rmq (v1). DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	g.P("import (")
	g.P("\"context\"")
	g.P()
	g.P("\"github.com/requiemofthesouls/pigeomail/pkg/modules/svc-rmq/client\"")
	listEventsImports := listImports(file)
	for _, evImport := range listEventsImports {
		g.P(fmt.Sprintf("%s %s", evImport.name, evImport.path))
	}
	g.P(")")

	for _, service := range file.Services {
		clientInterfaceName := fmt.Sprintf("%sRMQClient", service.Desc.Name())
		clientStructName := fmt.Sprintf("%sRMQClient", strcase.ToLowerCamel(string(service.Desc.Name())))
		g.P("type ", clientInterfaceName, " interface {")
		for _, method := range service.Methods {
			g.P(method.Desc.Name(), "(ctx context.Context, ev *", getEventStructureName(listEventsImports, method.Input), ") error")
		}
		g.P("}")

		g.P("type ", clientStructName, " struct {")
		g.P("client client.Manager")
		g.P("}")

		g.P("func New", clientInterfaceName, "(client client.Manager) ", clientInterfaceName, " {")
		g.P("return &", clientStructName, "{")
		g.P("client: client,")
		g.P("}")
		g.P("}")

		for _, method := range service.Methods {
			g.P("func (c *", clientStructName, ") ", method.Desc.Name(), "(ctx context.Context, msg *", getEventStructureName(listEventsImports, method.Input), ") error {")
			options := method.Desc.Options().(*descriptorpb.MethodOptions)
			producer := proto.GetExtension(options, optionspb.E_Publisher).(*optionspb.Publisher)
			g.P("return c.client.PublishToExchange(ctx, \"", producer.ExchangeName, "\", \"", producer.RoutingKey, "\", msg)")
			g.P("}")
		}
	}
}
