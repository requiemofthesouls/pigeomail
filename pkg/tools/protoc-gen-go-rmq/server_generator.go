package main

import (
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"

	optionspb "github.com/requiemofthesouls/pigeomail/pkg/tools/protoc-gen-go-rmq/pb"
)

func generateServers(gen *protogen.Plugin, file *protogen.File) {
	g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+".rmq_server.pb.go", file.GoImportPath)
	g.P("// ", file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-rmq. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	// imports
	g.P("import (")
	g.P("\"context\"")
	g.P()
	g.P("\"github.com/requiemofthesouls/pigeomail/pkg/svc-rmq/server\"")
	g.P("\"github.com/requiemofthesouls/pigeomail/pkg/svc-rmq/server/consumer\"")
	listEventsImports := listImports(file)
	for _, evImport := range listEventsImports {
		g.P(fmt.Sprintf("%s %s", evImport.name, evImport.path))
	}
	g.P(")")
	g.P()

	for _, service := range file.Services {
		structServerName := service.Desc.Name() + "RMQServer"

		g.P("type " + structServerName + " interface {")
		for _, method := range service.Methods {
			g.P(method.Desc.Name(), "(context.Context, *", getEventStructureName(listEventsImports, method.Input), ") error")
		}
		g.P("}")

		g.P("func Register", structServerName, "(s server.Manager, srv ", structServerName, ") {")
		g.P("s.RegisterService(")
		g.P("consumer.MapQueueHandlers{")

		for _, method := range service.Methods {
			options := method.Desc.Options().(*descriptorpb.MethodOptions)
			handler := proto.GetExtension(options, optionspb.E_Handler).(*optionspb.Handler)
			g.P("\"", handler.QueueName, "\": consumer.QueueHandlerItem{")
			g.P("ExchangeName: \"", handler.ExchangeName, "\",")
			g.P("RoutingKey: \"", handler.RoutingKey, "\",")
			g.P("Handler: NewRMQ", method.Desc.Name(), "(srv),")
			g.P("},")
		}

		g.P("},")
		g.P(")")
		g.P("}")

		for _, method := range service.Methods {
			structHandlerName := fmt.Sprintf("RMQ%s", method.Desc.Name())

			g.P("type ", structHandlerName, " struct {")
			g.P("listener ", structServerName)
			g.P("}")

			g.P("func New", structHandlerName, "(listener ", structServerName, ") ", structHandlerName, " {")
			g.P("return ", structHandlerName, "{")
			g.P("listener: listener,")
			g.P("}")
			g.P("}")

			g.P("func (h ", structHandlerName, ") Handle(ctx context.Context, dec func(interface{}) error) error {")
			g.P("var ev ", getEventStructureName(listEventsImports, method.Input))
			g.P("if err := dec(&ev); err != nil {")
			g.P("return err")
			g.P("}")
			g.P()
			g.P("return h.listener.", method.Desc.Name(), "(ctx, &ev)")
			g.P("}")
		}
	}
}
